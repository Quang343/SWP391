package com.example.AgriculturalWarehouseManagement.Backend.services.seller;

import com.example.AgriculturalWarehouseManagement.Backend.dtos.resquests.seller.User_SellerDTO;
import com.example.AgriculturalWarehouseManagement.Backend.models.User;
import com.example.AgriculturalWarehouseManagement.Backend.repositorys.seller.User_SellerRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class User_SellerServiceImpl implements User_SellerService {
    private final User_SellerRepository userRepository;
    private final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
    @Override
    public User_SellerDTO getUserByUsername(String username) {
        User user = userRepository.findByUserName(username);
        return mapToDTO(user);
    }

    @Override
    public User_SellerDTO updateUserProfile(User_SellerDTO dto) {
        User user = userRepository.findById((long)dto.getUserId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + dto.getUserId()));

        user.setFullName(dto.getFullName());
        user.setGender(dto.getGender());

        if (dto.getDob() != null && !dto.getDob().isEmpty()) {
            LocalDate dob = LocalDate.parse(dto.getDob(), dateFormat);
            LocalDate today = LocalDate.now();
            int age = today.getYear() - dob.getYear();

            if (dob.isAfter(today)) {
                throw new IllegalArgumentException("Ng√†y sinh kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n hi·ªán t·∫°i.");
            } else if (age < 10 || age > 100) {
                throw new IllegalArgumentException("Tu·ªïi ph·∫£i t·ª´ 10 ƒë·∫øn 100.");
            }

            user.setDob(dob);
        }

        user.setPhone(dto.getPhone());
        user.setUserName(dto.getUsername()); // ‚úÖ C·∫¨P NH·∫¨T USERNAME
        user.setPassword(dto.getPassword());

        userRepository.save(user);
        return mapToDTO(user);
    }

    private User_SellerDTO mapToDTO(User user) {
        return User_SellerDTO.builder()
                .userId(user.getUserId())
                .fullName(user.getFullName())
                .gender(user.getGender())
                .dob(user.getDob() != null ? user.getDob().format(dateFormat) : "")
                .createdAt(user.getCreatedAt() != null ? user.getCreatedAt().format(dateFormat) : "")
                .email(user.getEmail())
                .phone(user.getPhone())
                .username(user.getUserName()) // map l·∫°i ƒë√∫ng username
                .password(user.getPassword())
                .image(user.getImage()) // üëà B·ªï sung d√≤ng n√†y
                .build();
    }

    @Override
    public Optional<User_SellerDTO> getUserById(Long userId) {
        return userRepository.findById(userId)
                .map(this::mapToDTO);
    }


    @Override
    public void changePassword(Long userId, String currentPassword, String newPassword) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userId));
//        passwordEncoder.matches(loginRequest.getPassword(), passwordDatabase)
        if (!passwordEncoder.matches(currentPassword,user.getPassword())) {
            throw new IllegalArgumentException("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.");
        }

        if (user.getPassword().equals(newPassword)) {
            throw new IllegalArgumentException("M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng m·∫≠t kh·∫©u hi·ªán t·∫°i.");
        }
        String encodedPassword = passwordEncoder.encode(newPassword);
        user.setPassword(encodedPassword);
        userRepository.save(user);
    }

    @Value("${app.upload.product-dir}")
    private String rootUploadDir;

    @Override
    public String saveAvatar(Long userId, MultipartFile file) throws Exception {
        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        String filename = StringUtils.cleanPath(file.getOriginalFilename());
        String extension = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();

        if (extension.equals("webp")) {
            throw new IllegalArgumentException("ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ (webp). Vui l√≤ng ch·ªçn PNG ho·∫∑c JPG.");
        }

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // ƒê·ªçc ·∫£nh g·ªëc
        BufferedImage originalImage = ImageIO.read(file.getInputStream());
        if (originalImage == null) {
            throw new IllegalArgumentException("File kh√¥ng ph·∫£i l√† ·∫£nh h·ª£p l·ªá.");
        }

        // C·∫Øt v·ªÅ h√¨nh vu√¥ng (center crop)
        int width = originalImage.getWidth();
        int height = originalImage.getHeight();
        int squareSize = Math.min(width, height);
        int x = (width - squareSize) / 2;
        int y = (height - squareSize) / 2;
        BufferedImage cropped = originalImage.getSubimage(x, y, squareSize, squareSize);

        // T·∫°o ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c upload
        Path uploadDir = Paths.get(rootUploadDir, "Seller", String.valueOf(userId));
        if (!Files.exists(uploadDir)) {
            Files.createDirectories(uploadDir);
        }

        // T√™n c·ªë ƒë·ªãnh
        String newFileName = "avatar." + extension;
        Path outputPath = uploadDir.resolve(newFileName);
        ImageIO.write(cropped, extension, outputPath.toFile());

        // C·∫≠p nh·∫≠t t√™n v√†o DB
        user.setImage(newFileName);
        userRepository.save(user);

        return "/seller/" + userId + "/" + newFileName;
    }



}
